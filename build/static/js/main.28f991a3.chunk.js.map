{"version":3,"sources":["Constant.js","App.js","Components/Fav.js","Components/Router.js","serviceWorker.js","index.js"],"names":["sett","apiKey","host","Search","Input","Meta","Card","Header","Layout","Content","Footer","App","state","cravings","fav","searchedText","componentDidMount","json","localStorage","getItem","recipes","JSON","parse","console","log","_this","setState","fetch","method","mode","then","res","ok","Error","statusText","responseJson","temp","map","a","recipe_id","catch","err","componentDidUpdate","stringify","setItem","cardSave","recipe","url","concat","Object","toConsumableArray","cardUnsave","filter","item","getHeartColor","id","includes","color","recipeName","apiCall","data","this","recipesData","_this2","react_default","createElement","layout","className","menu","theme","defaultSelectedKeys","style","lineHeight","alignContent","alignItems","justifyContent","Item","key","Link","to","pathname","flex","verticalAlign","margin","placeholder","enterButton","size","onChange","e","target","value","onSearch","getCravings","padding","breadcrumb","background","minHeight","flexDirection","flexWrap","length","row","overflow","index","col","span","card","marginBottom","marginLeft","marginRight","minWidth","maxWidth","cover","alt","src","image_url","actions","icon","type","onClick","window","open","f2f_url","title","description","publisher","textAlign","Component","Fav","_callee","regenerator_default","wrap","_context","prev","next","elements","preventDefault","sent","stop","headers","Content-Type","Fav_Header","Fav_Content","publisher_url","Fav_Meta","Fav_Footer","Router","BrowserRouter","Switch","Route","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","Components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28f991a3.chunk.js","sourcesContent":["/*  This file contains three unique API keys to make calls to food2fork API.\n    The API only allows 50 calls per day per API key for free.\n*/\n\n// const apiKey = \"eeb1e15a51abd66394568f5f60bedfca\";\n\nconst sett = {\n  apiKey: \"c2785eea2057ed5e73c507ece4189bdc\",\n  host: \"http://sandbox.cci.drexel.edu:8047/\"\n};\n// const apiKey = \"ebf05d28fa1bd8fa5f989296db4e0db3\"; //chetan\n\nexport default sett;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport sett from \"./Constant.js\";\nimport { Input, Card, Col, Row, Icon, Layout, Menu, Breadcrumb } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nvar apiKey = sett.apiKey;\nvar host = sett.host;\nconst Search = Input.Search;\nconst { Meta } = Card;\nconst { Header, Content, Footer } = Layout;\n\nclass App extends Component {\n  state = {\n    cravings: [],\n    fav: [],\n    searchedText: \"\"\n  };\n\n  async getCravings(recipeName) {\n    const apiCall = await fetch(\n      `https://www.food2fork.com/api/search?key=${apiKey}&q=${recipeName}`\n    );\n    const data = await apiCall.json();\n    this.setState({ cravings: data.recipes });\n\n    const recipesData = JSON.stringify(data.recipes);\n    localStorage.setItem(\"recipesData\", recipesData);\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipesData\");\n    const recipes = JSON.parse(json);\n    console.log(recipes);\n    if (recipes != null) {\n      this.setState({ cravings: recipes });\n    }\n\n    var url = host + \"getFav?userName=pratik\";\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\"\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n        }\n        return res;\n      })\n      .then(res => res.json())\n      .then(responseJson => {\n        var temp = responseJson.map(a => a.recipe_id);\n        this.setState({\n          fav: temp\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.cravings);\n    localStorage.setItem(\"recipes\", recipes);\n  };\n\n  cardSave = recipe => {\n    var url =\n      host + \"addToFav?cardId=\" + JSON.stringify(recipe) + \"&&userName=pratik\";\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\"\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n        }\n        return res;\n      })\n      .then(responseJson => {\n        this.setState({\n          fav: [...this.state.fav, recipe.recipe_id]\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  cardUnsave = recipe => {\n    var url =\n      host +\n      \"removeFromFav?cardId=\" +\n      JSON.stringify(recipe) +\n      \"&&userName=pratik\";\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\"\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n        }\n        return res;\n      })\n      .then(responseJson => {\n        this.setState({\n          fav: this.state.fav.filter(item => item !== recipe.recipe_id)\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  getHeartColor = id => {\n    if (this.state.fav.includes(id)) {\n      return { color: \"red\" };\n    } else {\n      return { color: null };\n    }\n  };\n\n  render() {\n    return (\n      <Layout className=\"layout\">\n        <Header>\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            defaultSelectedKeys={[\"1\"]}\n            style={{\n              lineHeight: \"64px\",\n              alignContent: \"center\",\n              alignItems: \"center\",\n              justifyContent: \"center\"\n            }}\n          >\n            <Menu.Item key=\"1\">Dashboard</Menu.Item>\n            <Menu.Item key=\"2\">\n              <Link to={{ pathname: \"/fav\" }}>Favorite</Link>\n            </Menu.Item>\n            <Menu.Item\n              style={{\n                flex: 1\n              }}\n            >\n              <Search\n                style={{\n                  verticalAlign: \"middle\",\n                  margin: 0,\n                  flex: 1\n                }}\n                placeholder=\"Search Your Cravings!\"\n                enterButton=\"Search\"\n                size=\"large\"\n                onChange={e => this.setState({ searchedText: e.target.value })}\n                onSearch={() => this.getCravings(this.state.searchedText)}\n              />\n            </Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <Breadcrumb style={{ margin: \"16px 0\" }} />\n          <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\n            <div\n              style={{\n                background: \"#ECECEC\",\n                padding: \"30px\",\n                flexDirection: \"row\",\n                flexWrap: \"wrap\"\n              }}\n            >\n              {this.state.cravings.length > 0 && (\n                <Row style={{ overflow: \"hidden\" }}>\n                  {this.state.cravings.map((recipe, index) => {\n                    return (\n                      <Col span={8} key={recipe.recipe_id}>\n                        <Card\n                          style={{\n                            marginBottom: 20,\n                            marginLeft: 9,\n                            marginRight: 9,\n                            minWidth: 310,\n                            maxWidth: 430\n                          }}\n                          cover={<img alt=\"example\" src={recipe.image_url} />}\n                          actions={[\n                            <Icon\n                              type=\"heart\"\n                              style={this.getHeartColor(recipe.recipe_id)}\n                              theme={\n                                this.state.fav.includes(recipe.recipe_id)\n                                  ? \"filled\"\n                                  : \"outlined\"\n                              }\n                              onClick={() =>\n                                this.state.fav.includes(recipe.recipe_id)\n                                  ? this.cardUnsave(recipe)\n                                  : this.cardSave(recipe)\n                              }\n                            />,\n                            <Icon\n                              type=\"global\"\n                              onClick={() => window.open(recipe.f2f_url)}\n                            />\n                          ]}\n                        >\n                          <Meta\n                            title={recipe.title}\n                            description={recipe.publisher}\n                          />\n                        </Card>\n                      </Col>\n                    );\n                  })}\n                </Row>\n              )}\n              {this.state.cravings.length === 0 && (\n                <div\n                  style={{\n                    textAlign: \"center\"\n                  }}\n                >\n                  <h5>Search for Your Cravings</h5>\n                </div>\n              )}\n            </div>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Search Your Cravings ©2019 Created by Pratik Shekhar\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport sett from \"../Constant.js\";\nimport { Link } from \"react-router-dom\";\nimport { Layout, Menu, Breadcrumb } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { Card, Col, Row, Icon } from \"antd\";\n\nconst { Meta } = Card;\nconst { Header, Content, Footer } = Layout;\n\nvar apiKey = sett.apiKey;\nvar host = sett.host;\n\nclass Fav extends Component {\n  state = {\n    cravings: [],\n    fav: []\n  };\n\n  getCravings = async e => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const apiCall = await fetch(\n      `https://www.food2fork.com/api/search?key=${apiKey}&q=${recipeName}&count=20`\n    );\n    const data = await apiCall.json();\n    this.setState({ cravings: data.recipes });\n  };\n\n  componentDidMount = () => {\n    var url = host + \"getFav?userName=pratik\";\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\"\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n        }\n        return res;\n      })\n      .then(res => res.json())\n      .then(responseJson => {\n        console.log(responseJson);\n        this.setState({ cravings: responseJson });\n        var temp = responseJson.map(a => a.recipe_id);\n        console.log(temp);\n        this.setState({\n          fav: temp\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  cardSave = recipe => {\n    var url =\n      host + \"addToFav?cardId=\" + JSON.stringify(recipe) + \"&&userName=pratik\";\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n        }\n        return res;\n      })\n      .then(responseJson => {\n        this.setState({\n          fav: [...this.state.fav, recipe.recipe_id]\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  cardUnsave = recipe => {\n    var url =\n      host +\n      \"removeFromFav?cardId=\" +\n      JSON.stringify(recipe) +\n      \"&&userName=pratik\";\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\"\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n        }\n        return res;\n      })\n      .then(responseJson => {\n        this.setState({\n          fav: this.state.fav.filter(item => item !== recipe.recipe_id),\n          cravings: this.state.cravings.filter(item => item !== recipe)\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  getHeartColor = id => {\n    if (this.state.fav.includes(id)) {\n      return { color: \"red\" };\n    } else {\n      return { color: null };\n    }\n  };\n\n  render() {\n    return (\n      <Layout className=\"layout\">\n        <Header>\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            defaultSelectedKeys={[\"2\"]}\n            style={{ lineHeight: \"64px\" }}\n          >\n            <Menu.Item key=\"1\">\n              <Link to={{ pathname: \"/\" }}>Dashboard</Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\">Favorite</Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <Breadcrumb style={{ margin: \"16px 0\" }} />\n\n          <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\n            <div\n              style={{\n                background: \"#ECECEC\",\n                padding: \"30px\",\n                flexDirection: \"row\",\n                flexWrap: \"wrap\"\n              }}\n            >\n              {this.state.cravings.length > 0 && (\n                <Row style={{ overflow: \"hidden\" }}>\n                  {this.state.cravings.map((recipe, index) => {\n                    return (\n                      <Col span={8} key={recipe.recipe_id}>\n                        <Card\n                          style={{\n                            marginBottom: 20,\n                            marginLeft: 9,\n                            marginRight: 9,\n                            minWidth: 310,\n                            maxWidth: 430\n                          }}\n                          cover={<img alt=\"example\" src={recipe.image_url} />}\n                          actions={[\n                            <Icon\n                              type=\"heart\"\n                              style={this.getHeartColor(recipe.recipe_id)}\n                              theme={\n                                this.state.fav.includes(recipe.recipe_id)\n                                  ? \"filled\"\n                                  : \"outlined\"\n                              }\n                              onClick={() =>\n                                this.state.fav.includes(recipe.recipe_id)\n                                  ? this.cardUnsave(recipe)\n                                  : this.cardSave(recipe)\n                              }\n                            />,\n                            <Icon\n                              type=\"global\"\n                              onClick={() => window.open(recipe.publisher_url)}\n                            />\n                          ]}\n                        >\n                          <Meta\n                            title={recipe.title}\n                            description={recipe.publisher}\n                          />\n                        </Card>\n                      </Col>\n                    );\n                  })}\n                </Row>\n              )}\n              {this.state.cravings.length === 0 && (\n                <div\n                  style={{\n                    textAlign: \"center\"\n                  }}\n                >\n                  <h5>No Favorite Cravings</h5>\n                </div>\n              )}\n            </div>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Search Your Cravings ©2019 Created by Pratik Shekhar\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default Fav;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport App from \"../App\";\nimport Fav from \"./Fav\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/fav\" component={Fav} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Router from \"./Components/Router\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}